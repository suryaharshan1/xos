alias physicalSP S0;
physicalSP = ([PTBR + 2 * (SP/512)] * 512 ) + (SP % 512); 

alias sysCall S1;
sysCall = [physicalSP - 1];

alias filename S2;
filename = [physicalSP - 3];

if(sysCall == 9) then
	alias counter S3;
	counter = 0;
	while(counter<64 && [FAT + 8*counter]!=filename) do //check whether the filename exists in FAT or not
		counter = counter + 1;
	endwhile;
	if(counter == 64) then
		[physicalSP - 2] = -1;
		ireturn;	
	else
		alias basicBlock S4;
		basicBlock = [FAT + 8 * counter + 2];
		load(1,basicBlock);
		counter = 0;
		
		//checking the number of codepages of the new process

		alias count S5;                          //count of pages required by the new process
		count = 0;
		while(counter<256) do
			if([SCRATCHPAD + count]!= -1) then
				count = count + 1;
			endif;
			counter = counter + 1;
		endwhile;
		if(count > 3) then
			[physicalSP - 2] = -1;
			ireturn;
		endif;
		
		//checking  whether enough pages are available for new process
		alias PageNo S6;
		alias counter2 S7;
		alias freePageCount S8;
		freePageCount = 0;
		counter = 0;
		while (counter < 64) do
			if([MEM_LIST + counter]==0) then
				freePageCount = freePageCount + 1;				
				if(count == freePageCount) then
					break;				
				endif;
			endif;
			counter = counter + 1;
		endwhile;
		counter = 0;
		if(freePageCount < count) then
			while (counter < 4) do
				if([PTBR + 2 * counter] != -1 && ([PTBR + 2 * counter + 1] == "01" || [PTBR + 2 * counter + 1] == "11")) then
				 	PageNo = [PTBR + 2 * counter];
					if([MEM_LIST + PageNo] == 1) then
						freePageCount = freePageCount + 1;
						if(freePageCount == count) then
							break;
						endif;
					endif;
				endif;
				counter = counter + 1;
			endwhile;	
		endif;	

		if(freePageCount < count) then
			[physicalSP - 2] = -1;
			ireturn;
		endif;

		//start of satge 9 mod

		
		//decrementing the reference count of all valid pages
		counter = 0;
		while(counter<4) do
			if([PTBR + 2 * counter] != -1 && ([PTBR + 2 * counter + 1] == "01" || [PTBR + 2 * counter + 1] == "11")) then //if page valid
				PageNo = [PTBR + 2 * counter];				
				[MEM_LIST + PageNo] = [MEM_LIST + PageNo] - 1;          //decrement the reference count of page in mem list
				if ([MEM_LIST + PageNo]==0) then
					counter2 = 0;
					while (counter2 < 512) do
						[PageNo * 512 + counter2] ="";
						counter2 = counter2 + 1;
					endwhile;
				endif;
			endif;
			//if page invalid and belongs to swap area
			if([PTBR + 2 * counter] >= 448 && ([PTBR + 2 * counter + 1] == "00" || [PTBR + 2 * counter + 1] == "10")) then  
				PageNo = [PTBR + 2 * counter];
				[DISK_LIST + PageNo] = [DISK_LIST + PageNo] - 1; //decrementing the reference count
				store(6,20); //updating the disk free list
				//free the swap area if necessary			
			endif;
			counter = counter + 1;
		endwhile;

	
		counter2 = 0;
		while (counter<3 && [SCRATCHPAD + counter] != -1) do
			//[PTBR + 2 * counter] = [SCRATCHPAD + counter];
			while(counter2 < 64 && [MEM_LIST + counter2] != 0) do
				counter2 = counter2 + 1;		  
			endwhile;
			load(counter2,[SCRATCHPAD + counter]);
			[PTBR + 2 * counter] = counter2;
			[PTBR + 2 * counter + 1] = "01";
			[MEM_LIST + counter2] = 1;
			counter = counter + 1;
		endwhile;

		//finding stack Page for new process
		while(counter2<64 && [MEM_LIST + counter2] != 0) do
			counter2 = counter2 + 1;
		endwhile;
		
		[MEM_LIST + counter2] = 1;
		[PTBR + 2 * 3] = counter2;
		[PTBR + 2 * 3 + 1] = "01";
	
		//end of stage 9 mod
			//closing all open files of the current process
			alias currentPID S9;
			currentPID = (PTBR - 1024) / 8;
			
			//closing all files opened by current process
			counter = 15;
			alias SWOFTIndex S10;
			while(counter<30) do 
				if([READY_LIST + 32 * currentPID + counter] != -1) then
					SWOFTIndex = [READY_LIST + 32 * currentPID + counter];
					if([FILE_TABLE + 2 * SWOFTIndex]!= -1 && [FILE_TABLE + 2 * SWOFTIndex + 1] != 1) then
							[FILE_TABLE + 2 * SWOFTIndex + 1] = [FILE_TABLE + 2 * SWOFTIndex + 1] -1;
					else
						if([[FILE_TABLE + 2 * SWOFTIndex]!= -1 && [FILE_TABLE + 2 * SWOFTIndex + 1] == 1]) then
							[FILE_TABLE + 2 * SWOFTIndex] = -1;
							[FILE_TABLE + 2 * SWOFTIndex + 1] = 0;
						endif;
					endif;
				endif;
				counter = counter + 2;
			endwhile;
			//setting the stack pointer
			SP = 3 * 512;
			//the IP is set to 0(logical addressing)
			physicalSP = ([PTBR + 2 * (SP/512)] * 512 ) + (SP % 512);
			[physicalSP] = 0;
			ireturn;
		//endif;
	endif;
endif;
