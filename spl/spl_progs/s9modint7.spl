alias physicalSP S0;
physicalSP = ([PTBR + 2 * (SP/512)] * 512 ) + (SP % 512); 

alias sysCall S1;
sysCall = [physicalSP - 1];

if(sysCall == 10) then
	alias counter S2;
	alias currentPID S3;  //current Process ID
	alias currentPCB S4;  //current PCB
	alias nextPCB S5;      //next PCB which is ready		
        alias swoftIndex S6;
	alias temp S7;        //use as temp register
	currentPID = (PTBR - 1024) / 8;
	currentPCB = READY_LIST +  32 * currentPID;
	nextPCB = currentPCB + 32;
	while( nextPCB !=currentPCB && [nextPCB + 1] != 1) do  //checking whether any PCB has ready
 		if(nextPCB >= 2528) then
 			nextPCB = 1536;
 		else
 			nextPCB = nextPCB + 32;
 		endif;
	endwhile;
	if(nextPCB == currentPCB) then   //no other process than current process is in ready state 
		inline "HALT";	
	else	
		counter = 0;            //closing all the open file instances of the current process 
		while(counter<8) do
			if([currentPCB + 15 + 2 * counter] != -1) then //valid swoft entry
				swoftIndex = [currentPCB + 15 + 2 * counter];
				[FILE_TABLE + 2 * swoftIndex + 1] = [FILE_TABLE + 2 * swoftIndex + 1] - 1; //decrementing the file open count
				if([FILE_TABLE + 2 * swoftIndex + 1] == 0) then //if open count becomes 0 invalidate swoft entry
					[FILE_TABLE + 2 * swoftIndex ] = -1; 
				endif;						
				[currentPCB + 15 + 2 * counter] = -1;  //invalidating the per process open file table entry
				[currentPCB + 15 + 2 * counter + 1] = -1; // invalidating the lseek		
			endif;		
			counter = counter + 1;
		endwhile;
		//setting the state of the process as terminated in PCB 
		[currentPCB + 1] = 0; 
		//setting the pages of the process as unused in memory free list
		counter = 0;
		alias counter2 S8;
		while ( counter < 4) do
			if([PTBR + 2 * counter] != -1 && ([PTBR + 2 * counter + 1] =="01" || [PTBR + 2 * counter + 1] != "11")) then //valid page check
				temp = [PTBR + 2 * counter];
				[MEM_LIST + temp] = [MEM_LIST + temp] - 1; //decrementing the page used count
				if([MEM_LIST + temp] == 0) then
					counter2 = 0;					
					while(counter2<512) do
					    [temp * 512 + counter2] = "";
					    counter2 = counter2 + 1;	
					endwhile;		
				endif;			
			endif;
			if([PTBR + 2 * counter] >= 448 && ([PTBR + 2 * counter + 1] == "00" || [PTBR + 2 * counter + 1] != "10" )) then //memory page check
				temp = [PTBR + 2 * counter];
				[DISK_LIST + temp] = [DISK_LIST + temp] - 1; //decrementing the swap used
			endif;
			//setting the page table entries as invalid
			[PTBR + 2 * counter] = -1;
			[PTBR + 2 * counter + 1] ="00";
			counter = counter + 1;
		endwhile;
		//setting up the next process
		//loading up the registers
		BP=[nextPCB+2];
		SP=[nextPCB+3];

		PTBR=[nextPCB+5];
		PTLR=[nextPCB+6];

		R0=[nextPCB+7];
		R1=[nextPCB+8];
		R2=[nextPCB+9];
		R3=[nextPCB+10];
		R4=[nextPCB+11];
		R5=[nextPCB+12];
		R6=[nextPCB+13];
		R7=[nextPCB+14];	
		
		//setting up the IP on top of the stack
 		SP = SP + 1; 
		alias newphysicalSP S2; 
		newphysicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512); 

		[ newphysicalSP ] = [ nextPCB + 4 ]; //setting up the top of the stack with new IP

		[nextPCB+1]=2;	//set the process as running

		ireturn;
				
		
	endif;
endif;
ireturn;
