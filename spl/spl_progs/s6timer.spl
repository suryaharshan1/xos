alias currentPID S0;
currentPID = (PTBR - 1024)/8; 	//calculate the current process id
alias currentPCB S1;
currentPCB = READY_LIST + 32*currentPID;
[currentPCB + 1]=1; 		// set state of current process to ready

//set BP and SP of the current process

[currentPCB + 2] = BP;
[currentPCB + 3] = SP-1;

//finding physical address

alias physicalSP S2;
physicalSP = ([PTBR + 2 *(SP/512)]*512)+(SP%512);

[currentPCB+4]=[physicalSP];//set IP
[currentPCB+5]= PTBR;       //Set PTBR
[currentPCB+6]= PTLR;       //set PTLR

//setting R0 to R7 in pcb

[ currentPCB + 7 ] = R0;
[ currentPCB + 8 ] = R1;
[ currentPCB + 9 ] = R2;
[ currentPCB + 10 ] = R3;
[ currentPCB + 11 ] = R4;
[ currentPCB + 12 ] = R5;
[ currentPCB + 13 ] = R6;
[ currentPCB + 14 ] = R7;

//getting new PCB

alias newPCB S15;

newPCB = currentPCB + 32;

//check all the PCBs until we get a process with ready state

while([newPCB+1]!=1) do
   if(newPCB>=2528) then
    	newPCB = 1536;
    else
    	newPCB = newPCB + 32;
    endif;
endwhile;

BP=[newPCB+2];
SP=[newPCB+3];

PTBR=[newPCB+5];
PTLR=[newPCB+6];

R0=[newPCB+7];
R1=[newPCB+8];
R2=[newPCB+9];
R3=[newPCB+10];
R4=[newPCB+11];
R5=[newPCB+12];
R6=[newPCB+13];
R7=[newPCB+14];	

SP = SP + 1; 
alias newphysicalSP S2; 
newphysicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512); 

[ newphysicalSP ] = [ newPCB + 4 ]; 

[newPCB+1]=2;	

ireturn;
